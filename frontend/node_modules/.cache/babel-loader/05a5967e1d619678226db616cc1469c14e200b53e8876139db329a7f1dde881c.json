{"ast":null,"code":"var _jsxFileName = \"D:\\\\mernProject\\\\frontend\\\\src\\\\context\\\\FormContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormContext = /*#__PURE__*/createContext();\nexport function FormProvider({\n  children\n}) {\n  _s();\n  const [errors, setErrors] = useState({});\n  const [formData, setFormData] = useState({});\n  const validateField = (name, value) => {\n    let error = '';\n    switch (name) {\n      case 'email':\n        {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          if (!emailRegex.test(value)) {\n            error = 'Please enter a valid email address';\n          }\n          break;\n        }\n      case 'name':\n        if (value.length < 2) {\n          error = 'Name must be at least 2 characters long';\n        }\n        break;\n      // Add more validation cases as needed\n    }\n    setErrors(prev => ({\n      ...prev,\n      [name]: error\n    }));\n    return error === '';\n  };\n  const updateFormData = (name, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    validateField(name, value);\n  };\n  const resetForm = () => {\n    setFormData({});\n    setErrors({});\n  };\n  const value = {\n    formData,\n    errors,\n    updateFormData,\n    validateField,\n    resetForm\n  };\n  return /*#__PURE__*/_jsxDEV(FormContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(FormProvider, \"jRTJdI9gboSXTfJKjOF7rARcOgQ=\");\n_c = FormProvider;\nFormProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport function useForm() {\n  _s2();\n  const context = useContext(FormContext);\n  if (!context) {\n    throw new Error('useForm must be used within a FormProvider');\n  }\n  return context;\n}\n_s2(useForm, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"FormProvider\");","map":{"version":3,"names":["createContext","useContext","useState","PropTypes","jsxDEV","_jsxDEV","FormContext","FormProvider","children","_s","errors","setErrors","formData","setFormData","validateField","name","value","error","emailRegex","test","length","prev","updateFormData","resetForm","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","useForm","_s2","context","Error","$RefreshReg$"],"sources":["D:/mernProject/frontend/src/context/FormContext.jsx"],"sourcesContent":["import { createContext, useContext, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FormContext = createContext();\r\n\r\nexport function FormProvider({ children }) {\r\n  const [errors, setErrors] = useState({});\r\n  const [formData, setFormData] = useState({});\r\n\r\n  const validateField = (name, value) => {\r\n    let error = '';\r\n    \r\n    switch (name) {\r\n      case 'email':\r\n        { const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        if (!emailRegex.test(value)) {\r\n          error = 'Please enter a valid email address';\r\n        }\r\n        break; }\r\n      case 'name':\r\n        if (value.length < 2) {\r\n          error = 'Name must be at least 2 characters long';\r\n        }\r\n        break;\r\n      // Add more validation cases as needed\r\n    }\r\n\r\n    setErrors(prev => ({\r\n      ...prev,\r\n      [name]: error\r\n    }));\r\n\r\n    return error === '';\r\n  };\r\n\r\n  const updateFormData = (name, value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n    validateField(name, value);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({});\r\n    setErrors({});\r\n  };\r\n\r\n  const value = {\r\n    formData,\r\n    errors,\r\n    updateFormData,\r\n    validateField,\r\n    resetForm\r\n  };\r\n\r\n  return (\r\n    <FormContext.Provider value={value}>\r\n      {children}\r\n    </FormContext.Provider>\r\n  );\r\n}\r\nFormProvider.propTypes = {\r\n  children: PropTypes.node.isRequired, \r\n};\r\nexport function useForm() {\r\n  const context = useContext(FormContext);\r\n  if (!context) {\r\n    throw new Error('useForm must be used within a FormProvider');\r\n  }\r\n  return context;\r\n}\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,SAASO,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE5C,MAAMY,aAAa,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;IACrC,IAAIC,KAAK,GAAG,EAAE;IAEd,QAAQF,IAAI;MACV,KAAK,OAAO;QACV;UAAE,MAAMG,UAAU,GAAG,4BAA4B;UACjD,IAAI,CAACA,UAAU,CAACC,IAAI,CAACH,KAAK,CAAC,EAAE;YAC3BC,KAAK,GAAG,oCAAoC;UAC9C;UACA;QAAO;MACT,KAAK,MAAM;QACT,IAAID,KAAK,CAACI,MAAM,GAAG,CAAC,EAAE;UACpBH,KAAK,GAAG,yCAAyC;QACnD;QACA;MACF;IACF;IAEAN,SAAS,CAACU,IAAI,KAAK;MACjB,GAAGA,IAAI;MACP,CAACN,IAAI,GAAGE;IACV,CAAC,CAAC,CAAC;IAEH,OAAOA,KAAK,KAAK,EAAE;EACrB,CAAC;EAED,MAAMK,cAAc,GAAGA,CAACP,IAAI,EAAEC,KAAK,KAAK;IACtCH,WAAW,CAACQ,IAAI,KAAK;MACnB,GAAGA,IAAI;MACP,CAACN,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;IACHF,aAAa,CAACC,IAAI,EAAEC,KAAK,CAAC;EAC5B,CAAC;EAED,MAAMO,SAAS,GAAGA,CAAA,KAAM;IACtBV,WAAW,CAAC,CAAC,CAAC,CAAC;IACfF,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC;EAED,MAAMK,KAAK,GAAG;IACZJ,QAAQ;IACRF,MAAM;IACNY,cAAc;IACdR,aAAa;IACbS;EACF,CAAC;EAED,oBACElB,OAAA,CAACC,WAAW,CAACkB,QAAQ;IAACR,KAAK,EAAEA,KAAM;IAAAR,QAAA,EAChCA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACnB,EAAA,CAxDeF,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AAyD5BA,YAAY,CAACuB,SAAS,GAAG;EACvBtB,QAAQ,EAAEL,SAAS,CAAC4B,IAAI,CAACC;AAC3B,CAAC;AACD,OAAO,SAASC,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACxB,MAAMC,OAAO,GAAGlC,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAAC6B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB;AAACD,GAAA,CANeD,OAAO;AAAA,IAAAJ,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}